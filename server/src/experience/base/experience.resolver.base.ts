/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateExperienceArgs } from "./CreateExperienceArgs";
import { UpdateExperienceArgs } from "./UpdateExperienceArgs";
import { DeleteExperienceArgs } from "./DeleteExperienceArgs";
import { ExperienceFindManyArgs } from "./ExperienceFindManyArgs";
import { ExperienceFindUniqueArgs } from "./ExperienceFindUniqueArgs";
import { Experience } from "./Experience";
import { Resume } from "../../resume/base/Resume";
import { ExperienceService } from "../experience.service";

@graphql.Resolver(() => Experience)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class ExperienceResolverBase {
  constructor(
    protected readonly service: ExperienceService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Experience",
    action: "read",
    possession: "any",
  })
  async _experiencesMeta(
    @graphql.Args() args: ExperienceFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Experience])
  @nestAccessControl.UseRoles({
    resource: "Experience",
    action: "read",
    possession: "any",
  })
  async experiences(
    @graphql.Args() args: ExperienceFindManyArgs
  ): Promise<Experience[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Experience, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Experience",
    action: "read",
    possession: "own",
  })
  async experience(
    @graphql.Args() args: ExperienceFindUniqueArgs
  ): Promise<Experience | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Experience)
  @nestAccessControl.UseRoles({
    resource: "Experience",
    action: "create",
    possession: "any",
  })
  async createExperience(
    @graphql.Args() args: CreateExperienceArgs
  ): Promise<Experience> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        resume: args.data.resume
          ? {
              connect: args.data.resume,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Experience)
  @nestAccessControl.UseRoles({
    resource: "Experience",
    action: "update",
    possession: "any",
  })
  async updateExperience(
    @graphql.Args() args: UpdateExperienceArgs
  ): Promise<Experience | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          resume: args.data.resume
            ? {
                connect: args.data.resume,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Experience)
  @nestAccessControl.UseRoles({
    resource: "Experience",
    action: "delete",
    possession: "any",
  })
  async deleteExperience(
    @graphql.Args() args: DeleteExperienceArgs
  ): Promise<Experience | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Resume, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Resume",
    action: "read",
    possession: "any",
  })
  async resume(@graphql.Parent() parent: Experience): Promise<Resume | null> {
    const result = await this.service.getResume(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
